import{_ as t,c as a,o as i,aj as s}from"./chunks/framework.218xjblo.js";const m=JSON.parse('{"title":"(Pre-)Compilation","description":"","frontmatter":{},"headers":[],"relativePath":"api-reference/compilation.md","filePath":"api-reference/compilation.md","lastUpdated":1695492225000}'),o={name:"api-reference/compilation.md"};function l(n,e,p,d,c,h){return i(),a("div",null,[...e[0]||(e[0]=[s('<h1 id="pre-compilation" tabindex="-1">(Pre-)Compilation <a class="header-anchor" href="#pre-compilation" aria-label="Permalink to &quot;(Pre-)Compilation&quot;">​</a></h1><h2 id="handlebars-compile-template-options" tabindex="-1"><code>Handlebars.compile(template, options)</code> <a class="header-anchor" href="#handlebars-compile-template-options" aria-label="Permalink to &quot;`Handlebars.compile(template, options)`&quot;">​</a></h2><p>Compiles a template so it can be executed immediately.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{foo}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({});</span></span></code></pre></div><p>Supports a variety of options that alter how the template executes.</p><div><ul><li><code>data</code>: Set to <code>false</code> to disable <code>@data</code> tracking.</li><li><code>compat</code>: Set to <code>true</code> to enable recursive field lookup.</li><li><code>knownHelpers</code>: Hash containing list of helpers that are known to exist (truthy) at template execution time. Passing this allows the compiler to optimize a number of cases. Builtin helpers are automatically included in this list and may be omitted by setting that value to <code>false</code>.</li><li><code>knownHelpersOnly</code>: Set to <code>true</code> to allow further optimizations based on the known helpers list.</li><li><code>noEscape</code>: Set to <code>true</code> to not HTML escape any content.</li><li><code>strict</code>: Run in strict mode. In this mode, templates will throw rather than silently ignore missing fields. This has the side effect of disabling inverse operations such as <code>{{^foo}}{{/foo}}</code> unless fields are explicitly included in the source object.</li><li><code>assumeObjects</code>: Removes object existence checks when traversing paths. This is a subset of <code>strict</code> mode that generates optimized templates when the data inputs are known to be safe.</li><li><code>preventIndent</code>: By default, an indented partial-call causes the output of the whole partial being indented by the same amount. This can lead to unexpected behavior when the partial writes <code>pre</code>-tags. Setting this option to <code>true</code> will disable the auto-indent feature.</li><li><code>ignoreStandalone</code>: Disables standalone tag removal when set to <code>true</code>. When set, blocks and partials that are on their own line will not remove the whitespace on that line.</li><li><code>explicitPartialContext</code>: Disables implicit context for partials. When enabled, partials that are not passed a context value will execute against an empty object.</li></ul></div><h2 id="handlebars-precompile-template-options" tabindex="-1"><code>Handlebars.precompile(template, options)</code> <a class="header-anchor" href="#handlebars-precompile-template-options" aria-label="Permalink to &quot;`Handlebars.precompile(template, options)`&quot;">​</a></h2><p>Precompiles a given template so it can be sent to the client and executed without compilation.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> templateSpec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">precompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{foo}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Supports all of the same options parameters as the <code>Handlebars.compile</code> method. Additionally may pass:</p><ul><li><code>srcName</code>: Passed to generate the source map for the input file. When run in this manner, the return structure is <code>{code, map}</code> with <code>code</code> containing the template definition and <code>map</code> containing the source map.</li><li><code>destName</code>: Optional parameter used in conjunction with <code>srcName</code> to provide a destination file name when generating source maps.</li></ul><h2 id="handlebars-template-templatespec" tabindex="-1"><code>Handlebars.template(templateSpec)</code> <a class="header-anchor" href="#handlebars-template-templatespec" aria-label="Permalink to &quot;`Handlebars.template(templateSpec)`&quot;">​</a></h2><p>Sets up a template that was precompiled with <code>Handlebars.precompile</code>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(templateSpec);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({});</span></span></code></pre></div>',14)])])}const k=t(o,[["render",l]]);export{m as __pageData,k as default};
