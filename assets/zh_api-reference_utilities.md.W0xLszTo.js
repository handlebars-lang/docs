import{_ as l,c as t,o as n,aj as i,j as a,a as e}from"./chunks/framework.BFa_AUiY.js";const k=JSON.parse('{"title":"实用方法","description":"","frontmatter":{"outline":[1,3]},"headers":[],"relativePath":"zh/api-reference/utilities.md","filePath":"zh/api-reference/utilities.md","lastUpdated":1695492225000}'),r={name:"zh/api-reference/utilities.md"};function d(o,s,h,p,c,b){return n(),t("div",null,s[0]||(s[0]=[i('<h1 id="实用方法" tabindex="-1">实用方法 <a class="header-anchor" href="#实用方法" aria-label="Permalink to &quot;实用方法&quot;">​</a></h1><h2 id="助手代码实用方法" tabindex="-1">助手代码实用方法 <a class="header-anchor" href="#助手代码实用方法" aria-label="Permalink to &quot;助手代码实用方法&quot;">​</a></h2><p>这些方法会帮你更轻松地实现自定义助手代码。</p><h3 id="handlebars-safestring-string" tabindex="-1"><code>Handlebars.SafeString(string)</code> <a class="header-anchor" href="#handlebars-safestring-string" aria-label="Permalink to &quot;`Handlebars.SafeString(string)`&quot;">​</a></h3><p>防止 <code>string</code> 在模版渲染时转义。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SafeString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;div&gt;HTML Content!&lt;/div&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>当构建将会被标记为安全的字符串时，为安全起见，任何外部内容都应该使用 <code>Handlebars.escapeExpression</code> 方法转义。</p><h3 id="handlebars-escapeexpression-string" tabindex="-1"><code>Handlebars.escapeExpression(string)</code> <a class="header-anchor" href="#handlebars-escapeexpression-string" aria-label="Permalink to &quot;`Handlebars.escapeExpression(string)`&quot;">​</a></h3>',8),a("div",null,[a("p",null,"HTML 转义输入的字符串，使得字符串可以安全地在 HTML 内容中渲染为文字。"),a("div",{class:"language-js vp-adaptive-theme"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"js"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0","v-pre":""},[a("code",null,[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Handlebars.Utils."),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"escapeExpression"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(string);")])])])]),a("p",null,[e("将字符串值里的"),a("code",null,"&"),e(", "),a("code",null,"<"),e(", "),a("code",null,">"),e(", "),a("code",null,'"'),e(", "),a("code",null,"'"),e(", "),a("code",null,"`"),e(", "),a("code",null,"="),e(" 用 HTML 实体的等效值替换。"),a("code",null,"SafeString"),e(" 的值保持不变。")]),a("p",null,[e("除了 "),a("code",null,"{{{"),e(" 表达式之外的表达式都将被本方法处理。为了防止可能的代码注入，帮助函数也应该在返回 HTML 内容时通过一个 "),a("code",null,"SafeString"),e(" 的实例来使用本函数。")]),a("p",null,[e("本函数是 "),a("code",null,"Handlebars.Utils.escapeExpression"),e(" 的别名。")])],-1),i('<h3 id="handlebars-createframe-data" tabindex="-1"><code>Handlebars.createFrame(data)</code> <a class="header-anchor" href="#handlebars-createframe-data" aria-label="Permalink to &quot;`Handlebars.createFrame(data)`&quot;">​</a></h3><p>由块助手代码使用以创建子数据对象。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (options.data) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.data);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>更改数据状态的助手代码应会同时创建一个新的框架以将它们自己隔离并且避免和任何父程序的状态冲突。通常来说，在执行时，对每个助手代码来说只有一个框架需要被创建。比如，<code>each</code> 迭代器创建一个会被所有子执行程序应用的框架。</p><h2 id="general-utilities" tabindex="-1">General Utilities <a class="header-anchor" href="#general-utilities" aria-label="Permalink to &quot;General Utilities&quot;">​</a></h2><p>Handlebars 提供了一大批由 <code>Handlebars.Utils</code> 对象暴露的应用函数。</p><h3 id="handlebars-utils-isempty-value" tabindex="-1"><code>Handlebars.Utils.isEmpty(value)</code> <a class="header-anchor" href="#handlebars-utils-isempty-value" aria-label="Permalink to &quot;`Handlebars.Utils.isEmpty(value)`&quot;">​</a></h3><p>判断给定的值是否为空。</p><p>Handlebars.Utils.isEmpty(value)</p><p>以上函数被内建的 <code>if</code> 与 <code>with</code> 助手代码应用以控制执行流。Handlebars 对于「空」的定义如下:</p><ul><li>长度为 0 的数组</li><li>除了 0 以外的虚值</li></ul><p>以上是为了和 <a href="http://mustache.github.io/mustache.5.html#Sections" target="_blank" rel="noreferrer">Mustache behavior</a> 匹配。</p><h3 id="handlebars-utils-extend-obj-value" tabindex="-1"><code>Handlebars.Utils.extend(obj, value)</code> <a class="header-anchor" href="#handlebars-utils-extend-obj-value" aria-label="Permalink to &quot;`Handlebars.Utils.extend(obj, value)`&quot;">​</a></h3><p>简单的应用函数，用于使用 <code>value</code> 里定义的所有键来增强 <code>obj</code> 。</p><p>Handlebars.Utils.extend(foo, {bar: true})</p><p>将会将 <code>foo</code> 对象内的键 <code>bar</code> 对应的值设定为 <code>true</code>。</p><h3 id="handlebars-utils-tostring-obj" tabindex="-1"><code>Handlebars.Utils.toString(obj)</code> <a class="header-anchor" href="#handlebars-utils-tostring-obj" aria-label="Permalink to &quot;`Handlebars.Utils.toString(obj)`&quot;">​</a></h3><p>通用的 <code>toString</code> 方法。</p><h3 id="handlebars-utils-isarray-obj" tabindex="-1"><code>Handlebars.Utils.isArray(obj)</code> <a class="header-anchor" href="#handlebars-utils-isarray-obj" aria-label="Permalink to &quot;`Handlebars.Utils.isArray(obj)`&quot;">​</a></h3><p>判断对象是否为数组。</p><h3 id="handlebars-utils-isfunction-obj" tabindex="-1"><code>Handlebars.Utils.isFunction(obj)</code> <a class="header-anchor" href="#handlebars-utils-isfunction-obj" aria-label="Permalink to &quot;`Handlebars.Utils.isFunction(obj)`&quot;">​</a></h3><p>判断对象是否为函数。</p><h3 id="handlebars-log-level-message" tabindex="-1"><code>Handlebars.log(level, message)</code> <a class="header-anchor" href="#handlebars-log-level-message" aria-label="Permalink to &quot;`Handlebars.log(level, message)`&quot;">​</a></h3><p>被 <code>log</code> 助手代码使用的输出程序。</p><p>可能会在需要时被重载。</p>',25)]))}const g=l(r,[["render",d]]);export{k as __pageData,g as default};
