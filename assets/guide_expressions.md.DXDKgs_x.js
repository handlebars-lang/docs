import{_ as r,C as h,c as o,o as d,j as e,G as i,aj as n,a,t as k,w as p}from"./chunks/framework.218xjblo.js";const x=JSON.parse('{"title":"Expressions","description":"","frontmatter":{},"headers":[],"relativePath":"guide/expressions.md","filePath":"guide/expressions.md","lastUpdated":1761402298000}'),u={name:"guide/expressions.md"};function g(c,s,m,y,b,F){const t=h("Example"),l=h("Flex");return d(),o("div",null,[s[4]||(s[4]=e("h1",{id:"expressions",tabindex:"-1"},[a("Expressions "),e("a",{class:"header-anchor",href:"#expressions","aria-label":'Permalink to "Expressions"'},"​")],-1)),s[5]||(s[5]=e("div",null,[e("p",null,[a("Handlebars expressions are the basic unit of a Handlebars template. You can use them alone in a "),e("code",null,"{{mustache}}"),a(", pass them to a Handlebars helper, or use them as values in hash arguments.")])],-1)),s[6]||(s[6]=e("h2",{id:"basic-usage",tabindex:"-1"},[a("Basic Usage "),e("a",{class:"header-anchor",href:"#basic-usage","aria-label":'Permalink to "Basic Usage"'},"​")],-1)),e("p",null,[s[0]||(s[0]=a("Handlebars expressions are some contents enclosed by double curly braces ",-1)),e("code",null,k(),1),s[1]||(s[1]=a(". In the below template, ",-1)),s[2]||(s[2]=e("code",null,"firstname",-1)),s[3]||(s[3]=a(" is a variable that is enclosed by double curly braces, which is said to be an expression.",-1))]),i(t,{examplePage:"/examples/simple-expressions.md",show:"template"}),s[7]||(s[7]=e("p",null,"If the below input object is applied to the template",-1)),i(t,{examplePage:"/examples/simple-expressions.md",show:"input"}),s[8]||(s[8]=e("p",null,"Expressions are compiled to produce the output as follows:",-1)),i(t,{examplePage:"/examples/simple-expressions.md",show:"output"}),s[9]||(s[9]=e("h2",{id:"path-expressions",tabindex:"-1"},[a("Path expressions "),e("a",{class:"header-anchor",href:"#path-expressions","aria-label":'Permalink to "Path expressions"'},"​")],-1)),s[10]||(s[10]=e("p",null,"Handlebars expressions can also be dot-separated paths.",-1)),i(t,{examplePage:"/examples/path-expressions-dot.md",show:"template"}),s[11]||(s[11]=e("p",null,[a("This expression looks up the "),e("code",null,"person"),a(" property in the input object and in turn looks up the "),e("code",null,"firstname"),a(" and "),e("code",null,"lastname"),a(" property within the "),e("code",null,"person"),a(" object.")],-1)),s[12]||(s[12]=e("p",null,"Pass the below input object to the template",-1)),i(t,{examplePage:"/examples/path-expressions-dot.md",show:"input"}),s[13]||(s[13]=e("p",null,"Output will be generated as below",-1)),i(t,{examplePage:"/examples/path-expressions-dot.md",show:"output"}),s[14]||(s[14]=e("p",null,[a("Handlebars also supports a deprecated "),e("code",null,"/"),a(" syntax, so you could write the above template as:")],-1)),i(t,{examplePage:"/examples/path-expressions-slash.md",show:"template"}),s[15]||(s[15]=e("h2",{id:"changing-the-context",tabindex:"-1"},[a("Changing the context "),e("a",{class:"header-anchor",href:"#changing-the-context","aria-label":'Permalink to "Changing the context"'},"​")],-1)),s[16]||(s[16]=e("p",null,[a("Some helpers like "),e("code",null,"#with"),a(" and "),e("code",null,"#each"),a(" allow you to dive into nested objects. When you include "),e("code",null,"../"),a(" segments in your path, Handlebars will change back into the parent context.")],-1)),i(t,{examplePage:"/examples/path-expressions-dot-dot",show:"template"}),s[17]||(s[17]=e("p",null,"Even though the name is printed while in the context of a comment, it can still go back to the main context (the root-object) to retrieve the prefix.",-1)),s[18]||(s[18]=e("div",null,[e("div",{class:"warning custom-block"},[e("p",{class:"custom-block-title"},"WARNING"),e("p",null,[a("The exact value that "),e("code",null,"../"),a(" will resolve to varies based on the helper that is calling the block. Using "),e("code",null,"../"),a(" is only necessary when context changes. Children of helpers such as "),e("code",null,"{{#each}}"),a(" would require the use of "),e("code",null,"../"),a(" while children of helpers such as "),e("code",null,"{{#if}}"),a(" do not.")]),e("div",{class:"language-handlebars vp-adaptive-theme"},[e("button",{title:"Copy Code",class:"copy"}),e("span",{class:"lang"},"handlebars"),e("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0","v-pre":""},[e("code",null,[e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"{{"),e("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"permalink"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"}}")]),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"{{"),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#each"),e("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," comments"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"}}")]),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"  {{"),e("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"../permalink"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"}}")]),a(`
`),e("span",{class:"line"}),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"  {{"),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"#if"),e("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}}," title"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"}}")]),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"    {{"),e("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"../permalink"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"}}")]),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"  {{"),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"/if"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"}}")]),a(`
`),e("span",{class:"line"},[e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"{{"),e("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"/each"),e("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"}}")])])])]),e("p",null,[a("In this example all of the above reference the same prefix value even though they are located within different blocks. This behavior is new as of Handlebars 4; the "),e("a",{href:"https://github.com/handlebars-lang/handlebars.js/blob/master/release-notes.md",target:"_blank",rel:"noreferrer"},"release notes"),a(" discuss the prior behavior as well as the migration plan. Handlebars also allows for name conflict resolution between helpers and data fields via a "),e("code",null,"this"),a(" reference:")])])],-1)),s[19]||(s[19]=n('<h2 id="literal-segments" tabindex="-1">Literal segments <a class="header-anchor" href="#literal-segments" aria-label="Permalink to &quot;Literal segments&quot;">​</a></h2><p>Identifiers may be any unicode character except for the following:</p><p><em>Whitespace</em> <code>!</code> <code>&quot;</code> <code>#</code> <code>%</code> <code>&amp;</code> <code>&#39;</code> <code>(</code> <code>)</code> <code>*</code> <code>+</code> <code>,</code> <code>.</code> <code>/</code> <code>;</code> <code>&lt;</code> <code>=</code> <code>&gt;</code> <code>@</code> <code>[</code> <code>\\</code> <code>]</code> <code>^</code> <code>`</code> <code>{</code> <code>|</code> <code>}</code><code>~</code></p><p>In addition, the words <code>true</code>, <code>false</code>, <code>null</code> and <code>undefined</code> are only allowed in the first part of a path expression.</p><p>To reference a property that is not a valid identifier, you can use segment-literal notation, <code>[</code>. You may not include a closing <code>]</code> in a path-literal, but all other characters are allowed.</p><p>JavaScript-style strings, <code>&quot;</code> and <code>&#39;</code>, may also be used instead of <code>[</code> pairs.</p>',6)),i(t,{examplePage:"/examples/literal-segments.md",show:"template"}),s[20]||(s[20]=n('<h2 id="html-escaping" tabindex="-1">HTML-escaping <a class="header-anchor" href="#html-escaping" aria-label="Permalink to &quot;HTML-escaping&quot;">​</a></h2><div><p>In Handlebars, the values returned by the <code>{{expression}}</code> are HTML-escaped. Say, if the expression contains <code>&amp;</code>, then the returned HTML-escaped output is generated as <code>&amp;amp;</code>. If you don&#39;t want Handlebars to escape a value, use the &quot;triple-stash&quot;, <code>{{{</code>:</p></div><p>In the below template, you can learn how to produce the HTML escaped and raw output.</p>',3)),i(t,{examplePage:"/examples/html-escaping.md",show:"template"}),s[21]||(s[21]=e("p",null,"Pass the special characters to the template",-1)),i(t,{examplePage:"/examples/html-escaping.md",show:"input"}),s[22]||(s[22]=e("div",null,[e("p",null,[a('Expressions enclosed by "triple-stash" ('),e("code",null,"{{{"),a(") produce the raw output. Otherwise, HTML-escaped output is generated as below.")])],-1)),i(t,{examplePage:"/examples/html-escaping.md",show:"output"}),s[23]||(s[23]=e("h2",{id:"helpers",tabindex:"-1"},[a("Helpers "),e("a",{class:"header-anchor",href:"#helpers","aria-label":'Permalink to "Helpers"'},"​")],-1)),s[24]||(s[24]=e("p",null,"Helpers can be used to implement functionality that is not part of the Handlebars language itself.",-1)),s[25]||(s[25]=e("p",null,[a("A helper can be registered at runtime via "),e("code",null,"Handlebars.registerHelper"),a(", for example in order to uppercase all characters of a string.")],-1)),i(t,{examplePage:"/examples/helper-simple.md",show:"preparationScript"}),s[26]||(s[26]=e("p",null,'A Handlebars helper call is a simple identifier, followed by zero or more parameters (separated by a space). Each parameter is a Handlebars expression that is evaluated exactly the same way as described above in "Basic Usage":',-1)),i(t,{examplePage:"/examples/helper-simple.md",show:"template"}),s[27]||(s[27]=e("p",null,[a("In this case, "),e("code",null,"loud"),a(" is the name of a helper, and "),e("code",null,"lastname"),a(" is a parameter to the helper. The template will uppercase the "),e("code",null,"lastname"),a(" property of the input:")],-1)),i(l,null,{default:p(()=>[i(t,{examplePage:"/examples/helper-simple.md",show:"input"}),i(t,{examplePage:"/examples/helper-simple.md",show:"output"})]),_:1}),s[28]||(s[28]=e("h3",{id:"prevent-html-escaping-of-helper-return-values",tabindex:"-1"},[a("Prevent HTML-escaping of helper return values "),e("a",{class:"header-anchor",href:"#prevent-html-escaping-of-helper-return-values","aria-label":'Permalink to "Prevent HTML-escaping of helper return values"'},"​")],-1)),s[29]||(s[29]=e("div",null,[e("p",null,[a("When your helper returns an instance of "),e("code",null,"Handlebars.Safestring"),a(" the return-value is not escaped, even if the helper is called with "),e("span",{"v-pre":""},[e("code",null,"{{")]),a(" instead of "),e("code",null,"{{{"),a(". You have to take care that all parameters are escaped properly using "),e("code",null,"Handlebars.escapeExpression"),a(".")])],-1)),i(t,{examplePage:"/examples/helper-safestring.md",show:"preparationScript"}),s[30]||(s[30]=e("h3",{id:"helpers-with-multiple-parameters",tabindex:"-1"},[a("Helpers with Multiple Parameters "),e("a",{class:"header-anchor",href:"#helpers-with-multiple-parameters","aria-label":'Permalink to "Helpers with Multiple Parameters"'},"​")],-1)),s[31]||(s[31]=e("p",null,"Let us see another example of helpers with two parameters",-1)),i(t,{examplePage:"/examples/helper-multiple-parameters.md",show:"template"}),s[32]||(s[32]=e("p",null,[a("In this case, Handlebars will pass the link helper two parameters: the String "),e("code",null,"See Website"),a(" and the value of "),e("code",null,"people.url"),a(" from the below provided input "),e("code",null,"people"),a(" object.")],-1)),i(t,{examplePage:"/examples/helper-multiple-parameters.md",show:"input"}),s[33]||(s[33]=e("p",null,[a("The helper function "),e("code",null,"link"),a(" is used to generate a hyperlink as described in the script.")],-1)),i(t,{examplePage:"/examples/helper-multiple-parameters.md",show:"preparationScript"}),s[34]||(s[34]=e("p",null,"We will obtain the output using the input parameters",-1)),i(t,{examplePage:"/examples/helper-multiple-parameters.md",show:"output"}),s[35]||(s[35]=e("p",null,[a("In the above example, You could use the exact same helper with dynamic text based on the value of "),e("code",null,"people.text"),a(":")],-1)),i(l,null,{default:p(()=>[i(t,{examplePage:"/examples/helper-dynamic-parameters.md",show:"template"}),i(t,{examplePage:"/examples/helper-dynamic-parameters.md",show:"input"})]),_:1}),s[36]||(s[36]=e("h3",{id:"literal-arguments",tabindex:"-1"},[a("Literal arguments "),e("a",{class:"header-anchor",href:"#literal-arguments","aria-label":'Permalink to "Literal arguments"'},"​")],-1)),s[37]||(s[37]=e("p",null,[a("Helper calls may also have literal values passed to them either as parameter arguments or hash arguments. Supported literals include numbers, strings, "),e("code",null,"true"),a(", "),e("code",null,"false"),a(", "),e("code",null,"null"),a(" and "),e("code",null,"undefined"),a(":")],-1)),i(l,null,{default:p(()=>[i(t,{examplePage:"/examples/helper-literals",show:"template"})]),_:1}),s[38]||(s[38]=e("h3",{id:"helpers-with-hash-arguments",tabindex:"-1"},[a("Helpers with Hash arguments "),e("a",{class:"header-anchor",href:"#helpers-with-hash-arguments","aria-label":'Permalink to "Helpers with Hash arguments"'},"​")],-1)),s[39]||(s[39]=e("p",null,"Handlebars provides additional metadata, such as Hash arguments, to helpers as a final parameter.",-1)),i(t,{examplePage:"/examples/helper-hash-arguments.md",show:"template"}),s[40]||(s[40]=e("p",null,[a("In that template,the final parameter "),e("code",null,'href=people.url class="people"'),a(" are hash arguments sent to the helper.")],-1)),s[41]||(s[41]=e("p",null,"The keys in hash arguments must each be simple identifiers, and the values are Handlebars expressions. This means that values can be simple identifiers, paths, or Strings.",-1)),s[42]||(s[42]=e("p",null,[a("If we pass the below input to the template, the value of "),e("code",null,"person.url"),a(" can be obtained from the "),e("code",null,"person"),a(" object.")],-1)),i(t,{examplePage:"/examples/helper-hash-arguments.md",show:"input"}),s[43]||(s[43]=e("p",null,[a("As described in the helper script below, the hash arguments can be obtained from the last parameter "),e("code",null,"options"),a(" for further processing within the helper.")],-1)),i(t,{examplePage:"/examples/helper-hash-arguments.md",show:"preparationScript"}),s[44]||(s[44]=e("p",null,"The output of above helper is generated as below",-1)),i(t,{examplePage:"/examples/helper-hash-arguments.md",show:"output"}),s[45]||(s[45]=n('<p>Handlebars also offers a mechanism for invoking a helper with a block of the template. Block helpers can then invoke that block zero or more times with any context it chooses.</p><p><a href="./block-helpers.html">Learn More: Block Helpers</a></p><h3 id="disambiguating-helpers-calls-and-property-lookup" tabindex="-1">Disambiguating helpers calls and property lookup <a class="header-anchor" href="#disambiguating-helpers-calls-and-property-lookup" aria-label="Permalink to &quot;Disambiguating helpers calls and property lookup&quot;">​</a></h3><p>If a helper is registered by the same name as a property of an input object, the helper has priority over the input property. If you want to resolve the input property instead, you can prefix its name with <code>./</code> or <code>this.</code> (or the deprecated <code>this/</code>)</p>',4)),i(l,null,{default:p(()=>[i(t,{examplePage:"/examples/helper-data-name-conflict",show:"template"}),i(t,{examplePage:"/examples/helper-data-name-conflict",show:"input"}),i(t,{examplePage:"/examples/helper-data-name-conflict",show:"preparationScript"})]),_:1}),s[46]||(s[46]=n(`<h2 id="subexpressions" tabindex="-1">Subexpressions <a class="header-anchor" href="#subexpressions" aria-label="Permalink to &quot;Subexpressions&quot;">​</a></h2><p>Handlebars offers support for subexpressions, which allows you to invoke multiple helpers within a single mustache, and pass in the results of inner helper invocations as arguments to outer helpers. Subexpressions are delimited by parentheses.</p><div class="language-handlebars vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">handlebars</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">outer-helper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">inner-helper</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;def&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span></code></pre></div><p>In this case, <code>inner-helper</code> will get invoked with the string argument <code>&#39;abc&#39;</code>, and whatever the <code>inner-helper</code> function returns will get passed in as the first argument to <code>outer-helper</code> (and <code>&#39;def&#39;</code> will get passed in as the second argument to <code>outer-helper</code>).</p><h2 id="whitespace-control" tabindex="-1">Whitespace Control <a class="header-anchor" href="#whitespace-control" aria-label="Permalink to &quot;Whitespace Control&quot;">​</a></h2><p>Template whitespace may be omitted from either side of any mustache statement by adding a <code>~</code> character by the braces. When applied all whitespace on that side will be removed up to the first handlebars expression or non-whitespace character on that side.</p><div class="language-handlebars vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">handlebars</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#each</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nav</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">~}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{url}}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~#if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      {{~</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">~}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Empty</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">~}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/each</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span></code></pre></div><p>with this context:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{ url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, test: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>results in output sans newlines and formatting whitespace:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;bar&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Empty&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>This expands the default behavior of stripping lines that are &quot;standalone&quot; helpers (only a block helper, comment, or partial and whitespace).</p><div class="language-handlebars vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">handlebars</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#each</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nav</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{url}}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      {{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Empty</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    {{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~/each</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span></code></pre></div><p>will render</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; bar &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; Empty &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="escaping-handlebars-expressions" tabindex="-1">Escaping Handlebars expressions <a class="header-anchor" href="#escaping-handlebars-expressions" aria-label="Permalink to &quot;Escaping Handlebars expressions&quot;">​</a></h2><div><p>Handlebars content may be escaped in one of two ways, inline escapes or raw block helpers. Inline escapes created by prefixing a mustache block with <code>\\</code>. Raw blocks are created using <code>{{{{</code> mustache braces.</p></div><div class="language-handlebars vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">handlebars</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">escaped</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#raw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">escaped</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">{{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/raw</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">}}</span></span></code></pre></div><p>Raw blocks operate in the same manner as other <a href="./block-helpers.html">block helpers</a> with the distinction of the child content is treated as a literal string.</p>`,19))])}const C=r(u,[["render",g]]);export{x as __pageData,C as default};
