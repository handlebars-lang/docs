import{_ as e,c as a,o as i,aj as t}from"./chunks/framework.218xjblo.js";const k=JSON.parse('{"title":"运行时参数","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api-reference/runtime-options.md","filePath":"zh/api-reference/runtime-options.md","lastUpdated":1695492225000}'),l={name:"zh/api-reference/runtime-options.md"};function n(p,s,r,o,h,d){return i(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="运行时参数" tabindex="-1">运行时参数 <a class="header-anchor" href="#运行时参数" aria-label="Permalink to &quot;运行时参数&quot;">​</a></h1><div><p>&#39;Handlebars.compile&#39; 与 &#39;Handlebars.precompile&#39; 函数构造了另一个函数。构造的函数可以用 <code>template(context, options)</code> 调用。<code>context</code> 是输入的对象。</p><p><code>options</code> 是可能具有以下属性的对象：</p><ul><li><code>data</code> 输入一个对象以设定自定义的 <code>@variable</code> 的私有值。</li><li><code>helpers</code> 输入以提供自定义助手代码以及全局的助手代码。在模版运行时，本项所定义的值将会替换全局对象所定义的任何值。</li><li><code>partials</code> 输入以提供自定义代码片段以及全局定义的代码片段。在模版运行时，本项所定义的值将会替换全局对象所定义的任何值。</li><li><code>allowCallsToHelperMissing</code> （从 4.3.0 开始, 不安全）：如果设置为 <code>true</code>，类似 <code>{{helperMissing}}</code> 或 <code>{{blockHelperMissing}}</code> 的调用将会被允许。请注意，这允许模版作者假造模版并在运行 Handlebars 的环境下远程执行代码。（见<a href="https://github.com/handlebars-lang/handlebars.js/issues/1558%EF%BC%89" target="_blank" rel="noreferrer">https://github.com/handlebars-lang/handlebars.js/issues/1558）</a></li></ul></div><h2 id="控制原型访问的选项" tabindex="-1">控制原型访问的选项 <a class="header-anchor" href="#控制原型访问的选项" aria-label="Permalink to &quot;控制原型访问的选项&quot;">​</a></h2><p>从 4.6.0 版本开始，由于各种安全原因， Handlebars 默认禁止访问原型的属性以及上下文对象的方法。以下选项可以用来控制原型的可访问性。</p><div class="danger custom-block"><p class="custom-block-title">使用以下选项有安全风险。</p><p>允许这些属性可能会使得模版作者可以在运行 Handlebars 的机器上执行任意代码。尽管有限制，攻击者还是可能假造模版并且使得机器崩溃。</p><p>详细情况可以在 npm-security 中以及博客文章中找到（英文文档）：</p><p><a href="https://www.npmjs.com/advisories/1164" target="_blank" rel="noreferrer">1164</a>，<a href="https://www.npmjs.com/advisories/1316" target="_blank" rel="noreferrer">1316</a>， <a href="https://www.npmjs.com/advisories/1324" target="_blank" rel="noreferrer">1324</a> 和 <a href="https://www.npmjs.com/advisories/1325" target="_blank" rel="noreferrer">1325</a> 以及博客文章 <a href="http://mahmoudsec.blogspot.com/2019/04/handlebars-template-injection-and-rce.html" target="_blank" rel="noreferrer">Mahmoud Gamal</a>。</p></div><ul><li><p><code>allowProtoMethodsByDefault</code> （自 4.7.0 开始）：默认为 false 的布尔值，定义了在对象的原型中定义的方法是否可以被解析。</p><p>即使本项被设置为 <code>true</code>，<code>constructor</code>，<code>__defineGetter__</code>，<code>__defineSetter__</code>，<code>__lookupGetter__</code> 与 <code>__lookupSetter__</code> 还是会被禁止。只有在 <code>allowedProtoMethods</code> 内对应键被设置为 <code>true</code> 时，以上方法才可以被访问。</p><p>对本项给定任何值都会禁止 Handlebars 在一个 proto-method-access 尝试并失败的情况下向控制台写入警告。</p></li><li><p><code>allowedProtoMethods</code> （自 4.6.0 开始）：一个储存「字符串-布尔」类型的映射表。若「属性-名称」是父对象的方法，则将会被包含在表中。若未定义，将会使用　<code>allowProtoMethodsByDefault</code> 内定义的值。</p></li><li><p><code>allowProtoPropertiesByDefault</code> （自 4.7.0 开始）：默认为 false 的布尔变量。决定了在对象原型中定义的非方法的属性是否可以被解析。</p><p>即使该选项被设定为 <code>true</code>，属性 <code>__proto__</code> 依旧会被禁止。只有 <code>allowedProtoProperties</code> 中的对应键值被设定为 <code>true</code> 的时候它才能被访问。</p><p>对本项给定任何值都会禁止 Handlebars 在一个 proto-method-access 尝试并失败的情况下向控制台写入警告。</p></li><li><p><code>allowedProtoProperties</code> （自 4.6.0 开始）：一个储存「字符串-布尔」类型的映射表。若一个属性不是父对象的方法，则「属性- 名称」对将会被包含在这个表里。若未定义，将会使用 <code>allowProtoPropertiesByDefault</code> 内定义的值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{aString.trim}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ aString: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  abc  &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// result is empty, because trim is defined at String prototype</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{aString.trim}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { aString: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  abc  &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowedProtoMethods: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      trim: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// result = &#39;abc&#39;</span></span></code></pre></div></li></ul><p>如果你在某些地方无法传递运行时选项，例如在 <a href="https://www.npmjs.com/package/express-handlebars" target="_blank" rel="noreferrer">express-handlebars</a> 的情况下，你也可以使用这个包： <a href="https://www.npmjs.com/package/@handlebars/allow-prototype-access" target="_blank" rel="noreferrer">@handlebars/allow-prototype-access</a> 使 Handlebars 回退到 4.5.3 时的表现。</p>`,7)])])}const E=e(l,[["render",n]]);export{k as __pageData,E as default};
