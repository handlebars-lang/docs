import{_ as l,c as t,o as n,aj as i,j as a,a as e}from"./chunks/framework.218xjblo.js";const u=JSON.parse('{"title":"유틸리티 함수","description":"","frontmatter":{"outline":[1,3]},"headers":[],"relativePath":"ko/api-reference/utilities.md","filePath":"ko/api-reference/utilities.md","lastUpdated":1695492225000}'),r={name:"ko/api-reference/utilities.md"};function d(o,s,h,p,c,b){return n(),t("div",null,[...s[0]||(s[0]=[i('<h1 id="유틸리티-함수" tabindex="-1">유틸리티 함수 <a class="header-anchor" href="#유틸리티-함수" aria-label="Permalink to &quot;유틸리티 함수&quot;">​</a></h1><h2 id="헬퍼-유틸리티" tabindex="-1">헬퍼 유틸리티 <a class="header-anchor" href="#헬퍼-유틸리티" aria-label="Permalink to &quot;헬퍼 유틸리티&quot;">​</a></h2><p>이 메서드는 사용자 정의 헬퍼를 구현할 때 유용합니다.</p><h3 id="handlebars-safestring-string" tabindex="-1"><code>Handlebars.SafeString(string)</code> <a class="header-anchor" href="#handlebars-safestring-string" aria-label="Permalink to &quot;`Handlebars.SafeString(string)`&quot;">​</a></h3><p>템플릿이 렌더링될 때 string이 이스케이프되지 않도록 합니다.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SafeString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;div&gt;HTML Content!&lt;/div&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>안전한 문자열로 표시될 문자열을 구성할 때, 외부 콘텐츠는 <code>Handlebars.escapeExpression</code> 메서드를 사용하여 적절히이스케이 프되어야 보안 문제를 방지할 수 있습니다.</p><h3 id="handlebars-escapeexpression-string" tabindex="-1"><code>Handlebars.escapeExpression(string)</code> <a class="header-anchor" href="#handlebars-escapeexpression-string" aria-label="Permalink to &quot;`Handlebars.escapeExpression(string)`&quot;">​</a></h3>',8),a("div",null,[a("p",null,"전달된 문자열을 HTML 이스케이프하여 HTML 콘텐츠 내에서 텍스트로 렌더링할 때 안전하게 만듭니다."),a("div",{class:"language-js vp-adaptive-theme"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"js"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0","v-pre":""},[a("code",null,[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"Handlebars.Utils."),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"escapeExpression"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(string);")])])])]),a("p",null,[e("문자열 값에 대해 "),a("code",null,"&"),e(", "),a("code",null,"<"),e(", "),a("code",null,">"),e(", "),a("code",null,'"'),e(", "),a("code",null,"'"),e(", "),a("code",null,"`"),e(", "),a("code",null,"="),e(" 를 HTML 엔티티 값으로 대체합니다. "),a("code",null,"SafeString"),e(" 값은 변경되지 않습 니다.")]),a("p",null,[a("code",null,"{{{"),e(" 표현을 제외한 모든 표현의 출력은 이 메서드를 통해 전달됩니다. 헬퍼가 "),a("code",null,"SafeString"),e(" 인스턴스를 통해 HTML 콘텐츠를반 환할 때도 가능한 코드 삽입을 방지하기 위해 이 메서드를 사용해야 합니다.")]),a("p",null,[e("이 메서드는 "),a("code",null,"Handlebars.Utils.escapeExpression"),e("에 별칭으로 정의되어 있습니다.")])],-1),i('<h3 id="handlebars-createframe-data" tabindex="-1"><code>Handlebars.createFrame(data)</code> <a class="header-anchor" href="#handlebars-createframe-data" aria-label="Permalink to &quot;`Handlebars.createFrame(data)`&quot;">​</a></h3><p>블록 헬퍼가 자식 데이터 객체를 생성할 때 사용됩니다.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (options.data) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.data);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>데이터 상태를 수정하는 헬퍼는 새 프레임을 생성하여 자신을 격리하고 부모의 상태를 손상시키지 않아야 합니다. 일반적으로, 헬퍼 실행당 하나의 프레임만 생성하면 됩니다. 예를 들어, <code>each</code> 반복자는 모든 자식 실행에 대해 재사용되는 단일 프레임을생 성합니다.</p><h2 id="일반-유틸리티" tabindex="-1">일반 유틸리티 <a class="header-anchor" href="#일반-유틸리티" aria-label="Permalink to &quot;일반 유틸리티&quot;">​</a></h2><p>Handlebars는 <code>Handlebars.Utils</code> 객체를 통해 다양한 유틸리티 메서드를 제공합니다.</p><h3 id="handlebars-utils-isempty-value" tabindex="-1"><code>Handlebars.Utils.isEmpty(value)</code> <a class="header-anchor" href="#handlebars-utils-isempty-value" aria-label="Permalink to &quot;`Handlebars.Utils.isEmpty(value)`&quot;">​</a></h3><p>주어진 값이 비어 있는지 여부를 판단합니다.</p><p>Handlebars.Utils.isEmpty(value)</p><p>이 메서드는 내장된 <code>if</code> 및 <code>with</code> 헬퍼가 실행 흐름을 제어하는 데 사용됩니다. Handlebars의 빈 값 정의는 다음과 같습니다:</p><ul><li>길이가 0인 배열</li><li>0을 제외한 거짓 값</li></ul><p>이는 <a href="http://mustache.github.io/mustache.5.html#Sections" target="_blank" rel="noreferrer">Mustache behavior</a>을 따르기 위한 것입니다.</p><h3 id="handlebars-utils-extend-obj-value" tabindex="-1"><code>Handlebars.Utils.extend(obj, value)</code> <a class="header-anchor" href="#handlebars-utils-extend-obj-value" aria-label="Permalink to &quot;`Handlebars.Utils.extend(obj, value)`&quot;">​</a></h3><p><code>obj</code>를 <code>value</code>에 정의된 모든 키로 확장하는 간단한 유틸리티 메서드입니다.</p><p>Handlebars.Utils.extend(foo, {bar: true})</p><p>이는 객체 <code>foo</code>에 키 <code>bar</code>를 값 <code>true</code>로 설정합니다.</p><h3 id="handlebars-utils-tostring-obj" tabindex="-1"><code>Handlebars.Utils.toString(obj)</code> <a class="header-anchor" href="#handlebars-utils-tostring-obj" aria-label="Permalink to &quot;`Handlebars.Utils.toString(obj)`&quot;">​</a></h3><p>일반적인 <code>toString</code> 메서드입니다.</p><h3 id="handlebars-utils-isarray-obj" tabindex="-1"><code>Handlebars.Utils.isArray(obj)</code> <a class="header-anchor" href="#handlebars-utils-isarray-obj" aria-label="Permalink to &quot;`Handlebars.Utils.isArray(obj)`&quot;">​</a></h3><p>객체가 배열인지 여부를 판단합니다.</p><h3 id="handlebars-utils-isfunction-obj" tabindex="-1"><code>Handlebars.Utils.isFunction(obj)</code> <a class="header-anchor" href="#handlebars-utils-isfunction-obj" aria-label="Permalink to &quot;`Handlebars.Utils.isFunction(obj)`&quot;">​</a></h3><p>객체가 함수인지 여부를 판단합니다.</p><h3 id="handlebars-log-level-message" tabindex="-1"><code>Handlebars.log(level, message)</code> <a class="header-anchor" href="#handlebars-log-level-message" aria-label="Permalink to &quot;`Handlebars.log(level, message)`&quot;">​</a></h3><p><code>log</code> 헬퍼에서 사용하는 로거입니다.</p><p>원하는 경우 재정의할 수 있습니다.</p>',25)])])}const g=l(r,[["render",d]]);export{u as __pageData,g as default};
