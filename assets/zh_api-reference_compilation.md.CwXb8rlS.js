import{_ as a,c as s,o as i,aj as t}from"./chunks/framework.BFa_AUiY.js";const k=JSON.parse('{"title":"编译和预编译","description":"","frontmatter":{},"headers":[],"relativePath":"zh/api-reference/compilation.md","filePath":"zh/api-reference/compilation.md","lastUpdated":1695492225000}'),l={name:"zh/api-reference/compilation.md"};function p(o,e,d,n,c,h){return i(),s("div",null,e[0]||(e[0]=[t('<h1 id="编译和预编译" tabindex="-1">编译和预编译 <a class="header-anchor" href="#编译和预编译" aria-label="Permalink to &quot;编译和预编译&quot;">​</a></h1><h2 id="handlebars-compile-template-options" tabindex="-1"><code>Handlebars.compile(template, options)</code> <a class="header-anchor" href="#handlebars-compile-template-options" aria-label="Permalink to &quot;`Handlebars.compile(template, options)`&quot;">​</a></h2><p>编译一个模版以立即运行。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{foo}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({});</span></span></code></pre></div><p>支持多种选项以更改模版的执行方式。</p><div><ul><li><code>data</code>: 设置为 <code>false</code> 以终止 <code>@data</code> 跟踪。</li><li><code>compat</code>: 设置为 <code>true</code> 以允许递归领域查找。</li><li><code>knownHelpers</code>: 将已知在模版运行时会真实存在的助手代码列表 Hash 化。输入本参数会使编译器在一些情况下优化。内置助手代码已经在本列表里包含，但若设置本项为 <code>false</code>，内置的助手代码可能会被忽视。</li><li><code>knownHelpersOnly</code>: 设置为 <code>true</code> 以允许基于已知助手代码列表的进一步优化。</li><li><code>noEscape</code>: 设置为 <code>true</code> 以避免 HTML 的内容转义。</li><li><code>strict</code>: 在严格模式下运行。在这个模式下，模版将会对缺失参数抛出异常，而非静默忽略。同时，这种模式将会禁止逆操作，比如 <code>{{^foo}}{{/foo}}</code>，除非领域被特意包含在源对象中。</li><li><code>assumeObjects</code>: 在遍历路径时，不再检查对象是否存在。这是严格模式的子集，本子集在已知输入安全的情况下会生成最优模版。</li><li><code>preventIndent</code>: 默认情况下，缩进的代码片段调用将会导致代码片段整体全部被缩进。在代码片段写入 <code>pre</code> 标签时，这会造成未预料到的结果。将本项设置成 <code>true</code> 可以避免这种自动缩进的功能。</li><li><code>ignoreStandalone</code>: 当设置为 <code>true</code> 时，将不会去除单独的标签。在这种情况下，不在同一行的代码块和代码片段将不会去除本行里的空格。</li><li><code>explicitPartialContext</code>: 对代码片段的上下文进行精确设置。当开启时，没有设置上下文的代码片段将会依托空对象执行。</li></ul></div><h2 id="handlebars-precompile-template-options" tabindex="-1"><code>Handlebars.precompile(template, options)</code> <a class="header-anchor" href="#handlebars-precompile-template-options" aria-label="Permalink to &quot;`Handlebars.precompile(template, options)`&quot;">​</a></h2><p>对一个模版进行预编译，这样可以直接将模版送到客户端并执行而不需要再编译。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> templateSpec </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">precompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{foo}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>与 <code>Handlebars.compile</code> 方法的参数相同，并且额外的参数有：</p><ul><li><code>srcName</code>: 生成输入文件的源键值表。当运行时，返回的结构为 <code>{code, map}</code>。 <code>code</code> 包含模版的定义，<code>map</code> 包含源键值表。</li><li><code>destName</code>: 可选，本参数可以与 <code>srcName</code> 一起使用以在生成源键值表的时候同时提供目标文件的名称。</li></ul><h2 id="handlebars-template-templatespec" tabindex="-1"><code>Handlebars.template(templateSpec)</code> <a class="header-anchor" href="#handlebars-template-templatespec" aria-label="Permalink to &quot;`Handlebars.template(templateSpec)`&quot;">​</a></h2><p>设置一个已经被 <code>Handlebars.precompile</code> 预编译的模版。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> template </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(templateSpec);</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({});</span></span></code></pre></div>',14)]))}const m=a(l,[["render",p]]);export{k as __pageData,m as default};
