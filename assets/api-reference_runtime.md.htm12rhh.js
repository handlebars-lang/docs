import{_ as s,c as e,o as i,aj as t}from"./chunks/framework.BFa_AUiY.js";const c=JSON.parse('{"title":"The Handlebars runtime","description":"","frontmatter":{},"headers":[],"relativePath":"api-reference/runtime.md","filePath":"api-reference/runtime.md","lastUpdated":1695492225000}'),n={name:"api-reference/runtime.md"};function r(l,a,h,p,d,o){return i(),e("div",null,a[0]||(a[0]=[t('<h1 id="the-handlebars-runtime" tabindex="-1">The Handlebars runtime <a class="header-anchor" href="#the-handlebars-runtime" aria-label="Permalink to &quot;The Handlebars runtime&quot;">​</a></h1><h2 id="handlebars-registerpartial-name-partial" tabindex="-1"><code>Handlebars.registerPartial(name, partial)</code> <a class="header-anchor" href="#handlebars-registerpartial-name-partial" aria-label="Permalink to &quot;`Handlebars.registerPartial(name, partial)`&quot;">​</a></h2><p>Registers partials accessible by any template in the environment.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, partial);</span></span></code></pre></div><p>Also supports registering multiple partials at once.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ foo: partial, bar: partial });</span></span></code></pre></div><p>If loading the whole library, the partials may be string values which will be compiled on demand. If only loading the runtime, the partials must be a precompiled template that has been set up properly using the <code>Handlebars.template</code> method.</p><h2 id="handlebars-unregisterpartial-name" tabindex="-1"><code>Handlebars.unregisterPartial(name)</code> <a class="header-anchor" href="#handlebars-unregisterpartial-name" aria-label="Permalink to &quot;`Handlebars.unregisterPartial(name)`&quot;">​</a></h2><p>Unregisters a previously registered partial.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unregisterPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="handlebars-registerhelper-name-helper" tabindex="-1"><code>Handlebars.registerHelper(name, helper)</code> <a class="header-anchor" href="#handlebars-registerhelper-name-helper" aria-label="Permalink to &quot;`Handlebars.registerHelper(name, helper)`&quot;">​</a></h2><p>Registers helpers accessible by any template in the environment.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerHelper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {});</span></span></code></pre></div><p>Also supports registering multiple helpers at once.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerHelper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {} });</span></span></code></pre></div><h2 id="handlebars-unregisterhelper-name" tabindex="-1"><code>Handlebars.unregisterHelper(name)</code> <a class="header-anchor" href="#handlebars-unregisterhelper-name" aria-label="Permalink to &quot;`Handlebars.unregisterHelper(name)`&quot;">​</a></h2><p>Unregisters a previously registered helper.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unregisterHelper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="handlebars-registerdecorator-name-helper-deprecated" tabindex="-1"><code>Handlebars.registerDecorator(name, helper)</code> (deprecated) <a class="header-anchor" href="#handlebars-registerdecorator-name-helper-deprecated" aria-label="Permalink to &quot;`Handlebars.registerDecorator(name, helper)` (deprecated)&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">Deprecation notice</p><p>Custom decorators are deprecated and may vanish in the next major version of Handlebars. They expose a too large part of the internal API which is difficult to port to other languages and makes to code harder to maintain.</p></div><p>Registers a decorator accessible by any template in the environment.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {});</span></span></code></pre></div><p>Also supports registering multiple decorators at once.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">registerDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {}, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {} });</span></span></code></pre></div><h2 id="handlebars-unregisterdecorator-name" tabindex="-1"><code>Handlebars.unregisterDecorator(name)</code> <a class="header-anchor" href="#handlebars-unregisterdecorator-name" aria-label="Permalink to &quot;`Handlebars.unregisterDecorator(name)`&quot;">​</a></h2><p>Unregisters a previously registered decorator.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unregisterDecorator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="handlebars-create" tabindex="-1"><code>Handlebars.create()</code> <a class="header-anchor" href="#handlebars-create" aria-label="Permalink to &quot;`Handlebars.create()`&quot;">​</a></h2><p>Creates an isolated Handlebars environment.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OtherHandlebars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>Each environment has its own helpers and partials. This is only necessary for use cases that demand distinct helpers or partials. Most use cases can use the root <code>Handlebars</code> environment directly.</p><p>Templates created for a given environment are bound to that environment. This means that templates that need to run in multiple environments will need to be recompiled or reconstructed via <code>Handlebars.template</code> for each environment. This applies to partials as well.</p><h2 id="handlebars-noconflict" tabindex="-1"><code>Handlebars.noConflict()</code> <a class="header-anchor" href="#handlebars-noconflict" aria-label="Permalink to &quot;`Handlebars.noConflict()`&quot;">​</a></h2><p>Removes this Handlebars instance from the global namespace, restoring the global <code>Handlebars</code> variable to its previous value.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myHandlebars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">noConflict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>This allows for distinct versions of the library to be used simultaneously without concern for version conflicts.</p>',36)]))}const g=s(n,[["render",r]]);export{c as __pageData,g as default};
