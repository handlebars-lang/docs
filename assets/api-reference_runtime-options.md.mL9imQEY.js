import{_ as s,c as t,o as a,aj as i}from"./chunks/framework.BFa_AUiY.js";const k=JSON.parse('{"title":"Runtime options","description":"","frontmatter":{},"headers":[],"relativePath":"api-reference/runtime-options.md","filePath":"api-reference/runtime-options.md","lastUpdated":1695492225000}'),o={name:"api-reference/runtime-options.md"};function n(l,e,r,p,h,d){return a(),t("div",null,e[0]||(e[0]=[i(`<h1 id="runtime-options" tabindex="-1">Runtime options <a class="header-anchor" href="#runtime-options" aria-label="Permalink to &quot;Runtime options&quot;">​</a></h1><div><p>The function &#39;Handlebars.compile&#39; and &#39;Handlebars.precompile&#39; create a function. This function can be called as <code>template(context, options)</code> where <code>context</code> is the input object.</p><p><code>options</code> is an object that can have any of the following properties</p><ul><li><code>data</code> Pass in an object to define custom <code>@variable</code> private variables.</li><li><code>helpers</code> Pass in to provide custom helpers in addition to the globally defined helpers.<br> Values defined in this object will replace any values defined in the global object for the duration of the template execution.</li><li><code>partials</code> Pass in to provide custom partials in addition to the globally defined partials.<br> Values defined in this object will replace any values defined in the global object for the duration of the template execution.</li><li><code>allowCallsToHelperMissing</code> (since 4.3.0, insecure): If set to <code>true</code>, calls like <code>{{helperMissing}}</code> and <code>{{blockHelperMissing}}</code> will be allowed. Please note that this allows template authors to fabricate templates for Remote Code Execution on the environment running Handlebars (see <a href="https://github.com/handlebars-lang/handlebars.js/issues/1558" target="_blank" rel="noreferrer">https://github.com/handlebars-lang/handlebars.js/issues/1558</a>)</li></ul></div><h2 id="options-to-control-prototype-access" tabindex="-1">Options to control prototype access: <a class="header-anchor" href="#options-to-control-prototype-access" aria-label="Permalink to &quot;Options to control prototype access:&quot;">​</a></h2><p>From version 4.6.0 on, Handlebars forbids accessing prototype properties and methods of the context object by default. The reason are various security issues that arise from this possibility. The following options can be used to control this access.</p><div class="danger custom-block"><p class="custom-block-title">Using these properties may open security holes.</p><p>Allowing prototype properties may allow template authors to execute arbitray code on you the machine where Handlebars is running. Even with some restrictions in place, an attacker may fabricate Handlebars templates that crash your machine.</p><p>Details can be found in the npm-security advisories <a href="https://www.npmjs.com/advisories/755" target="_blank" rel="noreferrer">755</a>, <a href="https://www.npmjs.com/advisories/1164" target="_blank" rel="noreferrer">1164</a>, <a href="https://www.npmjs.com/advisories/1316" target="_blank" rel="noreferrer">1316</a>, <a href="https://www.npmjs.com/advisories/1324" target="_blank" rel="noreferrer">1324</a> and <a href="https://www.npmjs.com/advisories/1325" target="_blank" rel="noreferrer">1325</a> and in the blog-article of <a href="http://mahmoudsec.blogspot.com/2019/04/handlebars-template-injection-and-rce.html" target="_blank" rel="noreferrer">Mahmoud Gamal</a>.</p></div><ul><li><p><code>allowProtoMethodsByDefault</code> (since 4.7.0): a boolean (default: false) that defines whether methods that are define on the prototype of an object should be resolvable or not, by default.</p><p>The methods <code>constructor</code>, <code>__defineGetter__</code>, <code>__defineSetter__</code>, <code>__lookupGetter__</code> and <code>__lookupSetter__</code> are forbidden, even if this option is set to <code>true</code>. They can be accessed only if the corresponding key in <code>allowedProtoMethods</code> is set to <code>true</code>.</p><p>Setting this option to any value disables the warning that Handlebars writes to the console if a proto-method-access is attempted and forbidden.</p></li><li><p><code>allowedProtoMethods</code> (since 4.6.0): a string-to-boolean map of property-names that are allowed if they are methods of the parent object. Undefined values revert the the value defined in <code>allowProtoMethodsByDefault</code>.</p></li><li><p><code>allowProtoPropertiesByDefault</code> (since 4.7.0): a boolean (default: false) that defines whether non-method properties that are defined on the prototype of an object should be resolvable or not, by default.</p><p>The property <code>__proto__</code> is forbidden, even if this option is set to <code>true</code>. It can only be accessed if the corresponding key in <code>allowedProtoProperties</code> is set to <code>true</code>.</p><p>Setting this option to any value disables the warning that Handlebars writes to the console if a proto-property-access is attempted and forbidden.</p></li><li><p><code>allowedProtoProperties</code> (since 4.6.0): a string-to-boolean map of property-names that are allowed if they are properties but not methods of the parent object. Undefined values revert to the value defined in <code>allowProtoPropertiesByDefault</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{aString.trim}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ aString: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  abc  &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// result is empty, because trim is defined at String prototype</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{aString.trim}}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { aString: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;  abc  &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowedProtoMethods: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      trim: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// result = &#39;abc&#39;</span></span></code></pre></div></li></ul><p>You can also use the package <a href="https://www.npmjs.com/package/@handlebars/allow-prototype-access" target="_blank" rel="noreferrer">@handlebars/allow-prototype-access</a> revert to 4.5.3 behavior in cases where you cannot pass runtime-options, like in <a href="https://www.npmjs.com/package/express-handlebars" target="_blank" rel="noreferrer">express-handlebars</a>.</p>`,7)]))}const u=s(o,[["render",n]]);export{k as __pageData,u as default};
