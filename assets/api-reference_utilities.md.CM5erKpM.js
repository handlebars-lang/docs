import{_ as a,c as s,o as i,aj as t}from"./chunks/framework.BFa_AUiY.js";const u=JSON.parse('{"title":"Utility functions","description":"","frontmatter":{"outline":[1,3]},"headers":[],"relativePath":"api-reference/utilities.md","filePath":"api-reference/utilities.md","lastUpdated":1695492225000}'),n={name:"api-reference/utilities.md"};function l(r,e,o,d,h,p){return i(),s("div",null,e[0]||(e[0]=[t('<h1 id="utility-functions" tabindex="-1">Utility functions <a class="header-anchor" href="#utility-functions" aria-label="Permalink to &quot;Utility functions&quot;">​</a></h1><h2 id="helper-utilities" tabindex="-1">Helper utilities <a class="header-anchor" href="#helper-utilities" aria-label="Permalink to &quot;Helper utilities&quot;">​</a></h2><p>These methods come handy when you implement custom helpers.</p><h3 id="handlebars-safestring-string" tabindex="-1"><code>Handlebars.SafeString(string)</code> <a class="header-anchor" href="#handlebars-safestring-string" aria-label="Permalink to &quot;`Handlebars.SafeString(string)`&quot;">​</a></h3><p>Prevents <code>string</code> from being escaped when the template is rendered.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SafeString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;div&gt;HTML Content!&lt;/div&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>When constructing the string that will be marked as safe, any external content should be properly escaped using the <code>Handlebars.escapeExpression</code> method to avoid potential security concerns.</p><h3 id="handlebars-escapeexpression-string" tabindex="-1"><code>Handlebars.escapeExpression(string)</code> <a class="header-anchor" href="#handlebars-escapeexpression-string" aria-label="Permalink to &quot;`Handlebars.escapeExpression(string)`&quot;">​</a></h3><p>HTML escapes the passed string, making it safe for rendering as text within HTML content.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Handlebars.Utils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">escapeExpression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string);</span></span></code></pre></div><p>Replaces <code>&amp;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&quot;</code>, <code>&#39;</code>, <code>`</code>, <code>=</code> with the HTML entity equivalent value for string values. <code>SafeString</code> values are left untouched.</p><p>The output of all expressions except for triple-braced expressions are passed through this method. Helpers should also use this method when returning HTML content via a <code>SafeString</code> instance, to prevent possible code injection.</p><p>This method is aliased at <code>Handlebars.Utils.escapeExpression</code>.</p><h3 id="handlebars-createframe-data" tabindex="-1"><code>Handlebars.createFrame(data)</code> <a class="header-anchor" href="#handlebars-createframe-data" aria-label="Permalink to &quot;`Handlebars.createFrame(data)`&quot;">​</a></h3><p>Used by block helpers to create child data objects.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (options.data) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Handlebars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.data);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  data.foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;bar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  options.data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Helpers that modify the data state should create a new frame when doing so, to isolate themselves and avoid corrupting the state of any parents. Generally, only one frame needs to be created per helper execution. For example, the <code>each</code> iterator creates a single frame which is reused for all child execution.</p><h2 id="general-utilities" tabindex="-1">General Utilities <a class="header-anchor" href="#general-utilities" aria-label="Permalink to &quot;General Utilities&quot;">​</a></h2><p>Handlebars offers a variety of utility methods that are exposed through the <code>Handlebars.Utils</code> object.</p><h3 id="handlebars-utils-isempty-value" tabindex="-1"><code>Handlebars.Utils.isEmpty(value)</code> <a class="header-anchor" href="#handlebars-utils-isempty-value" aria-label="Permalink to &quot;`Handlebars.Utils.isEmpty(value)`&quot;">​</a></h3><p>Determines if a given value is empty.</p><p>Handlebars.Utils.isEmpty(value)</p><p>This is used by the built-in <code>if</code> and <code>with</code> helpers to control their execution flow. The Handlebars definition of empty is any of:</p><ul><li>Array with length 0</li><li>falsy values other than 0</li></ul><p>This is intended to match the <a href="http://mustache.github.io/mustache.5.html#Sections" target="_blank" rel="noreferrer">Mustache behavior</a>.</p><h3 id="handlebars-utils-extend-obj-value" tabindex="-1"><code>Handlebars.Utils.extend(obj, value)</code> <a class="header-anchor" href="#handlebars-utils-extend-obj-value" aria-label="Permalink to &quot;`Handlebars.Utils.extend(obj, value)`&quot;">​</a></h3><p>Simple utility method to augment <code>obj</code> with all keys defined on <code>value</code>.</p><p>Handlebars.Utils.extend(foo, {bar: true})</p><p>Will set the key <code>bar</code> on object <code>foo</code> with the value <code>true</code>.</p><h3 id="handlebars-utils-tostring-obj" tabindex="-1"><code>Handlebars.Utils.toString(obj)</code> <a class="header-anchor" href="#handlebars-utils-tostring-obj" aria-label="Permalink to &quot;`Handlebars.Utils.toString(obj)`&quot;">​</a></h3><p>Generic <code>toString</code> method.</p><h3 id="handlebars-utils-isarray-obj" tabindex="-1"><code>Handlebars.Utils.isArray(obj)</code> <a class="header-anchor" href="#handlebars-utils-isarray-obj" aria-label="Permalink to &quot;`Handlebars.Utils.isArray(obj)`&quot;">​</a></h3><p>Determines if an object is an array.</p><h3 id="handlebars-utils-isfunction-obj" tabindex="-1"><code>Handlebars.Utils.isFunction(obj)</code> <a class="header-anchor" href="#handlebars-utils-isfunction-obj" aria-label="Permalink to &quot;`Handlebars.Utils.isFunction(obj)`&quot;">​</a></h3><p>Determines if an object is a function.</p><h3 id="handlebars-log-level-message" tabindex="-1"><code>Handlebars.log(level, message)</code> <a class="header-anchor" href="#handlebars-log-level-message" aria-label="Permalink to &quot;`Handlebars.log(level, message)`&quot;">​</a></h3><p>Logger used by the <code>log</code> helper.</p><p>May be overridden if desired.</p>',38)]))}const b=a(n,[["render",l]]);export{u as __pageData,b as default};
