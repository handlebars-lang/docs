function f(r){return new Worker("/assets/worker-DUDJmeIt.js",{name:r==null?void 0:r.name})}const c=(r,e,t={})=>{if(!Number.isFinite(e))throw new TypeError("Expected `wait` to be a finite number");let n,o,s=[];return function(...u){return new Promise(i=>{const l=t.before&&!o;clearTimeout(o),o=setTimeout(()=>{o=null;const m=t.before?n:r.apply(this,u);for(i of s)i(m);s=[]},e),l?(n=r.apply(this,u),i(n)):s.push(i)})}};c.promise=r=>{let e;return async function(...t){if(e)return e;try{return e=r.apply(this,t),await e}finally{e=void 0}}};async function h(r,e,t){try{return await Promise.race([r,w(e,()=>new a(`Timed out after ${e}ms`))])}catch(n){throw n instanceof a&&t(),n}}async function w(r,e){return new Promise((t,n)=>setTimeout(()=>n(e()),r))}class a extends Error{constructor(e){super(e)}}class p{constructor(e,t){this.workerFactory=e,this.timeoutMillis=t,this._recreateWorker()}async postMessage(e){return new Promise((t,n)=>{this.worker.addEventListener("message",o=>{o.data.error?n(new Error(o.data.error)):t(o.data)}),h(this.worker.postMessage(e),this.timeoutMillis,()=>this._recreateWorker())})}_recreateWorker(){this.worker!=null&&this.worker.terminate(),this.worker=this.workerFactory()}}function E(r){let e=Promise.resolve();return function(){return e=y(e,()=>r.apply(this,[...arguments])),e}}async function y(r,e){return r.then(e,e)}const d=2e3,k=200,T=new p(()=>new f,d);async function x(r){return T.postMessage(r)}const W=c(E(x),k);async function b(r){return W(r)}export{b as executeExample};
